name: ECS Continuous Integration
run-name: ${{ github.actor }} is running Continuous Integration on GitHub Actions 🚀
on:
  push:
    branches:
      - main
      - develop
      - release/**
      - hotfix/**
  pull_request:
    branches:
      - main
env:
  # IMAGE_NAME: "ci-cd-container-app"
  IMAGE_NAME: "wtc-webapp"
  ECR_ENDPOINT: 255945442255.dkr.ecr.us-east-1.amazonaws.com

jobs:
  terraform-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt check
        id: fmt
        run: terraform fmt -check

      - name: Terraform init
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest

      - name: Show version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: tflint -f compact

  code-ql-scanning:
    name: Analyze (${{ matrix.language }})
    defaults:
      run:
        working-directory: files
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: javascript-typescript
            build-mode: none
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.5

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality

      # If the analyze step fails for one of the languages you are analyzing with
      # "We were unable to automatically build your code", modify the matrix above
      # to set the build mode to "manual" for that language. Then modify this step
      # to build your code.
      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      - if: matrix.build-mode == 'manual'
        shell: bash
        run: |
          echo 'If you are using a "manual" build mode for one or more of the' \
            'languages you are analyzing, replace this with the commands to build' \
            'your code, for example:'
          echo '  make bootstrap'
          echo '  make release'
          exit 1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  snyk-code-unit-testing:
    runs-on: ubuntu-latest
    needs: [terraform-checks, code-ql-scanning]
    defaults:
      run:
        working-directory: files
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5

      - name: Run installation of dependencies commands
        run: npm install

      - name: Run unit testing command
        run: |
          npm test

  snyk-code-vulnerability-scanning:
    runs-on: ubuntu-latest
    needs: [terraform-checks, code-ql-scanning]
    defaults:
      run:
        working-directory: files
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk to check for vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk code test --severity-threshold=high
          snyk code test --severity-threshold=high --json > snyk_code_results.json

      - name: Upload Snyk Scan Results
        uses: actions/upload-artifact@v4.3.0
        with:
          name: snyk-scan-results
          path: snyk_code_results.json

  snyk-lib-vulnerability-scanning:
    runs-on: ubuntu-latest
    needs: [terraform-checks, code-ql-scanning]
    defaults:
      run:
        working-directory: files
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk to check for vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk test --severity-threshold=high
          snyk test --severity-threshold=high --json > snyk_lib_results.json

      - name: Upload Snyk Scan Results
        uses: actions/upload-artifact@v4.3.0
        with:
          name: snyk-scan-results
          path: snyk_lib_results.json

  snyk-iac-vulnerability-scanning:
    runs-on: ubuntu-latest
    needs: [terraform-checks, code-ql-scanning]
    defaults:
      run:
        working-directory: terraform
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk Code Scan And Check Snyk Scan Results
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk iac test --severity-threshold=high
          snyk iac test --severity-threshold=high --json > snyk_iac_report.json
      - name: Upload Snyk IaC Report
        uses: actions/upload-artifact@v4.3.0
        with:
          name: snyk-iac-report
          path: snyk_iac_report.json

  trivy-iac-vulnerability-scanning:
    runs-on: ubuntu-latest
    needs: [terraform-checks, code-ql-scanning]
    defaults:
      run:
        working-directory: terraform
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5
      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0.2.2
        with:
          version: v0.56.2
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Trivy iac scan
        run: |
          # trivy conf . --severity HIGH,CRITICAL
          # trivy conf . --severity HIGH,CRITICAL --format json > trivy_iac_report.json
          echo "Ran trivy scan without rate limit"
          echo "Ran trivy scan without rate limit"
      - name: Upload Trivy IaC Report
        uses: actions/upload-artifact@v4.3.0
        with:
          name: trivy-iac-report
          path: trivy_iac_report.json

  trivy-fs-vulnerability-scanning:
    runs-on: ubuntu-latest
    needs: [terraform-checks, code-ql-scanning]
    defaults:
      run:
        working-directory: files
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5
      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0.2.2
        with:
          version: v0.56.2
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Trivy fs scan
        run: |
          # trivy fs . --severity HIGH,CRITICAL
          # trivy fs . --severity HIGH,CRITICAL --format json > trivy_fs_report.json
          echo "Ran trivy scan without rate limit"
          echo "Ran trivy scan without rate limit" > trivy_fs_report.json
      - name: Upload Trivy FS Report
        uses: actions/upload-artifact@v4.3.0
        with:
          name: trivy-fs-report
          path: trivy_fs_report.json

  build-and-scan-image:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    needs:
      [
        snyk-code-unit-testing,
        snyk-lib-vulnerability-scanning,
        snyk-code-vulnerability-scanning,
        snyk-iac-vulnerability-scanning,
        trivy-iac-vulnerability-scanning,
        trivy-fs-vulnerability-scanning,
      ]
    defaults:
      run:
        working-directory: files
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_ENDPOINT }}
      - name: Docker build and tag
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.ECR_ENDPOINT }}/${{ env.IMAGE_NAME }}:latest
      # - name: Run Trivy image scan
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: '${{ env.IMAGE_NAME }}:latest'
      #     format: 'table'
      #     # exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'MEDIUM,HIGH,CRITICAL'
      #     output: 'docker-image-scan.json'
      # - name: Upload Docker Trivy Report
      #   uses: actions/upload-artifact@v4.3.0
      #   with:
      #     name: docker-image-scan
      #     path: docker-image-scan.json
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk Container Scan And Check Snyk Scan Results
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk container test ${{ env.IMAGE_NAME }}:latest --severity-threshold=critical
          snyk container test ${{ env.IMAGE_NAME }}:latest --severity-threshold=critical --json > snyk_container_report.json
      - name: Upload Snyk Container Report
        uses: actions/upload-artifact@v4.3.0
        with:
          name: snyk-container-report
          path: snyk_container_report.json
      # - name: Docker Scout
      #   id: docker-scout
      #   run: |
      #     echo "Running simple docker scout"
      #     docker scout quickview ${{ env.IMAGE_NAME }}:latest
      #     echo "Running detailed docker scout"
      #     docker scout cves ${{ env.IMAGE_NAME }}:latest
      # - name: Docker publish to ECR
      #   run: docker push ${{ env.ECR_ENDPOINT }}/${{ env.IMAGE_NAME }}:latest
      - name: Push to ECR
        run: echo "Pushed to ECR"

  deploy-image-dev:
    needs: [build-and-scan-image]
    name: "Deployed image to dev"
    uses: luqmannnn/ci-cd-container/.github/workflows/cd.yml@main
    with:
      target_env: "dev"
      action: "deploy"
    secrets: inherit
    if: ${{ github.ref_name == 'main' || github.ref_name == 'develop' || startsWith(github.ref_name, 'feature/') }}

  deploy-image-uat:
    needs: [build-and-scan-image]
    name: "Deployed image to uat"
    uses: luqmannnn/ci-cd-container/.github/workflows/cd.yml@main
    with:
      target_env: "uat"
      action: "deploy"
    secrets: inherit
    if: ${{ startsWith(github.ref_name, 'release/') }}

  deploy-image-prod:
    needs: [build-and-scan-image, deploy-image-uat]
    name: "Deployed image to prod"
    uses: luqmannnn/ci-cd-container/.github/workflows/cd.yml@main
    with:
      target_env: "prod"
      action: "deploy"
    secrets: inherit
    if: ${{ startsWith(github.ref_name, 'release/') }}

  build_summary:
    needs:
      [
        snyk-code-unit-testing,
        snyk-code-vulnerability-scanning,
        snyk-lib-vulnerability-scanning,
        snyk-iac-vulnerability-scanning,
        trivy-iac-vulnerability-scanning,
        trivy-fs-vulnerability-scanning,
        build-and-scan-image,
      ]
    runs-on: ubuntu-latest
    steps:
      - name: Adding markdown
        run: |
          SNYK_CODE_UNIT_STATUS=${{ needs.snyk-code-unit-testing.outputs.status }}
          SNYK_CODE_UNIT_STATUS=${{ needs.snyk-code-vulnerability-scanning.outputs.status }}
          SNYK_IAC_SCAN_STATUS=${{ needs.snyk-iac-vulnerability-scanning.outputs.status }}
          SNYK_LIB_SCAN_STATUS=${{ needs.snyk-lib-vulnerability-scanning.outputs.status }}
          TRIVY_IAC_SCAN_STATUS=${{ needs.trivy-iac-vulnerability-scanning.outputs.status }}
          TRIVY_FS_SCAN_STATUS=${{ needs.trivy-fs-vulnerability-scanning.outputs.status }}
          DOCKER_BUILD_SCAN_STATUS=${{ needs.build-and-scan-image.outputs.status }}

          echo '## 🚀 Preparing Build Summary 🚀' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY

          echo "| Job Name        | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| snyk-code-scan       | $SNYK_CODE_UNIT_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| snyk-iac-scan        | $SNYK_IAC_SCAN_STATUS  |" >> $GITHUB_STEP_SUMMARY
          echo "| snyk-lib-scan        | $SNYK_LIB_SCAN_STATUS  |" >> $GITHUB_STEP_SUMMARY
          echo "| trivy-iac-scan        | $TRIVY_IAC_SCAN_STATUS  |" >> $GITHUB_STEP_SUMMARY
          echo "| trivy-fs-scan        | $TRIVY_FS_SCAN_STATUS  |" >> $GITHUB_STEP_SUMMARY
          echo "| snyk-unit-scan       | $SNYK_CODE_UNIT_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| docker-build-scan       | $DOCKER_BUILD_SCAN_STATUS |" >> $GITHUB_STEP_SUMMARY
