name: ECS Cluster Creation, Deployment and Destruction
run-name: ${{ github.actor }} is making changes to ECS via GitHub Actions ðŸš€
on:
  workflow_dispatch:
    inputs:
      target_env:
        type: environment
        description: Select the environment
      action:
        type: choice
        options:
          - create
          - destroy
          - deploy
        description: Select the action, whether to create or destroy ECS cluster
  workflow_call:
    inputs:
      target_env:
        type: string
        required: true
      action:
        type: string
        required: true
jobs:
  pre-action-step:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4.1.5

      - name: print environment and action
        run: |
          echo "env selected is ${{ inputs.target_env }}"
          echo "action selected is ${{ inputs.action }}"

  vpc-create:
    needs: pre-action-step
    uses: tcwong2024/CE7-M3-CICD-TF-Docker-Scan/.github/workflows/network-create.yml@main
    name: Create VPC before creating ECS
    with:
      action: create
    secrets: inherit

  create-or-delete-ecs-cluster:
    needs: [pre-action-step]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform init
        run: terraform init

      - name: Terraform workspace list
        run: terraform workspace list

      - name: Terraform workspace new environment and select
        run: |
          terraform workspace select ${{ inputs.target_env }} || terraform workspace new ${{ inputs.target_env }}
          terraform workspace list

      - name: Terraform apply or destroy
        run: |
          if [ "${{ inputs.action }}" = "create" ] || [ "${{ inputs.action }}" = "deploy"  ]; then
            terraform plan -var-file=${{ inputs.target_env }}.tfvars
            # Comment out apply to prevent creation of cluster
            # terraform apply -var-file=${{ inputs.target_env }}.tfvars --auto-approve
          elif [ "${{ inputs.action }}" = "destroy" ]; then
            terraform destroy -var-file=${{ inputs.target_env }}.tfvars -auto-approve
          fi

  deploy_summary:
    needs: [create-or-delete-ecs-cluster]
    runs-on: ubuntu-latest
    steps:
      - name: Adding markdown
        run: |
          echo '## ðŸš€ Preparing Deployment Summary ðŸš€' >> $GITHUB_STEP_SUMMARY

          echo "| Environment           | Action                | Status        |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------------------|-----------------------|---------------|" >> $GITHUB_STEP_SUMMARY
          echo "| ${{ inputs.target_env }}  | ${{ inputs.action }}  | Successful ðŸš€ |" >> $GITHUB_STEP_SUMMARY
